<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>ColaBlack 分享文档</title><link>https://ColaBlack.github.io/ColaBlack.githjub.io</link><description>分享一些配置信息以便日后复用</description><copyright>ColaBlack 分享文档</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/142144384?u=bb69885187594a28a371d8fd6929247791fc8dc9&amp;v=4</url><title>avatar</title><link>https://ColaBlack.github.io/ColaBlack.githjub.io</link></image><lastBuildDate>Sun, 27 Oct 2024 13:18:12 +0000</lastBuildDate><managingEditor>ColaBlack 分享文档</managingEditor><ttl>60</ttl><webMaster>ColaBlack 分享文档</webMaster><item><title>minio对象存储 -图床 -图片上传 -头像</title><link>https://ColaBlack.github.io/ColaBlack.githjub.io/post/minio-dui-xiang-cun-chu-%20--tu-chuang-%20--tu-pian-shang-chuan-%20--tou-xiang.html</link><description># minio对象存储 -图床 -图片上传 -头像&#13;
&#13;
参考：&#13;
&#13;
1,[MINIO在java中的使用](https://blog.csdn.net/weixin_43676950/article/details/118938099)&#13;
&#13;
2.[MinIO Linux官方文档](https://min.io/docs/minio/linux/index.html)&#13;
&#13;
### 1.利用1panel安装minio&#13;
&#13;
图片上传等服务依赖于对象存储服务，本文就以开源对象储存minio为例简单介绍。</description><guid isPermaLink="true">https://ColaBlack.github.io/ColaBlack.githjub.io/post/minio-dui-xiang-cun-chu-%20--tu-chuang-%20--tu-pian-shang-chuan-%20--tou-xiang.html</guid><pubDate>Sun, 27 Oct 2024 13:17:42 +0000</pubDate></item><item><title>java操作邮箱 - 邮箱发送验证码 -redis分布式缓存 -redisson分布式缓存</title><link>https://ColaBlack.github.io/ColaBlack.githjub.io/post/java-cao-zuo-you-xiang-%20-%20-you-xiang-fa-song-yan-zheng-ma-%20-redis-fen-bu-shi-huan-cun-%20-redisson-fen-bu-shi-huan-cun.html</link><description>java操作邮箱 - 邮箱发送验证码 -redis分布式缓存 -redisson分布式缓存&#13;
&#13;
参考:java操作163邮箱&#13;
&#13;
本文以163邮箱为例，介绍如何用java发送邮箱。</description><guid isPermaLink="true">https://ColaBlack.github.io/ColaBlack.githjub.io/post/java-cao-zuo-you-xiang-%20-%20-you-xiang-fa-song-yan-zheng-ma-%20-redis-fen-bu-shi-huan-cun-%20-redisson-fen-bu-shi-huan-cun.html</guid><pubDate>Wed, 23 Oct 2024 07:53:50 +0000</pubDate></item><item><title>Caffeine本地缓存和缓存雪崩，缓存击穿，缓存穿透</title><link>https://ColaBlack.github.io/ColaBlack.githjub.io/post/Caffeine-ben-di-huan-cun-he-huan-cun-xue-beng-%EF%BC%8C-huan-cun-ji-chuan-%EF%BC%8C-huan-cun-chuan-tou.html</link><description># Caffeine本地缓存&#13;
&#13;
参考：[缓存雪崩，缓存击穿，缓存穿透](https://blog.csdn.net/weixin_43750212/article/details/143142982)&#13;
           [Caffeine本地缓存](https://juejin.cn/post/7392105060899340299)&#13;
&#13;
在一些场景下可以引入缓存加速，利用redis实现缓存通常是一个不错的选择，但有时为了避免系统变得复杂可以使用本地缓存。</description><guid isPermaLink="true">https://ColaBlack.github.io/ColaBlack.githjub.io/post/Caffeine-ben-di-huan-cun-he-huan-cun-xue-beng-%EF%BC%8C-huan-cun-ji-chuan-%EF%BC%8C-huan-cun-chuan-tou.html</guid><pubDate>Wed, 23 Oct 2024 06:31:33 +0000</pubDate></item><item><title>智谱AI java SDK调用（前后端操作）</title><link>https://ColaBlack.github.io/ColaBlack.githjub.io/post/zhi-pu-AI%20java%20SDK-diao-yong-%EF%BC%88-qian-hou-duan-cao-zuo-%EF%BC%89.html</link><description>智谱AI java SDK调用&#13;
&#13;
参考:[智谱ai官方文档](https://open.bigmodel.cn/dev/howuse/introduction)&#13;
&#13;
1.安装依赖&#13;
&#13;
在maven 的pom.xml中输入&#13;
&#13;
    &lt;dependency&gt;&#13;
        &lt;groupId&gt;cn.bigmodel.openapi&lt;/groupId&gt;&#13;
        &lt;artifactId&gt;oapi-java-sdk&lt;/artifactId&gt;&#13;
        &lt;version&gt;release-V4-2.3.0&lt;/version&gt;&#13;
    &lt;/dependency&gt;&#13;
&#13;
2.编写通用AI调用工具类&#13;
&#13;
    package edu.zafu.teaai.utils;&#13;
    &#13;
    import com.zhipu.oapi.ClientV4;&#13;
    import com.zhipu.oapi.Constants;&#13;
    import com.zhipu.oapi.service.v4.model.*;&#13;
    import edu.zafu.teaai.constant.AiConfig;&#13;
    import io.reactivex.Flowable;&#13;
    &#13;
    import java.util.ArrayList;&#13;
    import java.util.List;&#13;
    &#13;
    /**&#13;
     * AI调用模块&#13;
     *&#13;
     * @author ColaBlack&#13;
     */&#13;
    public class AiUtils {&#13;
    &#13;
        /**&#13;
         * 业务ID模版&#13;
         */&#13;
        private static final String REQUEST_ID_TEMPLATE = 'teaAI-request-%s';&#13;
    &#13;
    &#13;
        /**&#13;
         * AI调用客户端&#13;
         */&#13;
        private static final ClientV4 CLIENT = new ClientV4.Builder(AiConfig.API_KEY).build();&#13;
    &#13;
        /**&#13;
         * 调用AI接口(同步)&#13;
         *&#13;
         * @param prompt 提示词&#13;
         * @return AI返回的答案&#13;
         */&#13;
        public static String aiCaller(String prompt) {&#13;
            List&lt;ChatMessage&gt; messages = new ArrayList&lt;&gt;();&#13;
            ChatMessage chatMessage = new ChatMessage(ChatMessageRole.USER.value(), prompt);&#13;
            messages.add(chatMessage);&#13;
            String requestId = String.format(REQUEST_ID_TEMPLATE, System.currentTimeMillis());&#13;
            ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()&#13;
                    .model(AiConfig.MODEL_NAME)&#13;
                    .stream(Boolean.FALSE)&#13;
                    .invokeMethod(Constants.invokeMethod)&#13;
                    .messages(messages)&#13;
                    .requestId(requestId)&#13;
                    .build();&#13;
            ModelApiResponse invokeModelApiResp = CLIENT.invokeModelApi(chatCompletionRequest);&#13;
            return invokeModelApiResp.getData().getChoices().get(0).getMessage().getContent().toString();&#13;
        }&#13;
    &#13;
        /**&#13;
         * 调用AI接口(SSE)&#13;
         *&#13;
         * @author ColaBlack&#13;
         */&#13;
        public static Flowable&lt;ModelData&gt; aiCallerFlow(String prompt) {&#13;
            List&lt;ChatMessage&gt; messages = new ArrayList&lt;&gt;();&#13;
            ChatMessage chatMessage = new ChatMessage(ChatMessageRole.USER.value(), prompt);&#13;
            messages.add(chatMessage);&#13;
            String requestId = String.format(REQUEST_ID_TEMPLATE, System.currentTimeMillis());&#13;
            ChatCompletionRequest chatCompletionRequest = ChatCompletionRequest.builder()&#13;
                    .model(AiConfig.MODEL_NAME).&#13;
                    stream(Boolean.TRUE).&#13;
                    invokeMethod(Constants.invokeMethod)&#13;
                    .messages(messages)&#13;
                    .requestId(requestId)&#13;
                    .build();&#13;
            ModelApiResponse invokeModelApiResp = CLIENT.invokeModelApi(chatCompletionRequest);&#13;
            return invokeModelApiResp.getFlowable();&#13;
        }&#13;
    }&#13;
    &#13;
&#13;
3.配置信息&#13;
&#13;
将代码中的AiConfig.MODEL_NAME替换为要使用的模型名称，AiConfig.API_KEY替换为你的API_KEY&#13;
&#13;
4.调用AI&#13;
&#13;
如果要同步调用AI，那就直接将全部的提示词传入aiCaller方法，耐心等待即可返回结果。</description><guid isPermaLink="true">https://ColaBlack.github.io/ColaBlack.githjub.io/post/zhi-pu-AI%20java%20SDK-diao-yong-%EF%BC%88-qian-hou-duan-cao-zuo-%EF%BC%89.html</guid><pubDate>Wed, 23 Oct 2024 01:15:43 +0000</pubDate></item></channel></rss>